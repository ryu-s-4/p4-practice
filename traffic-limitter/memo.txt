

- 解説記事０（〜12中）
  - vlan-counter の実装編
    - GO 言語によるテーブルエントリ登録，マルチキャストグループ登録，カウンタ値取得の実装
    - P4Runtime の仕様と照らし合わせながら

- 解説記事１：準備編（〜12中）
  - 実装内容の概要
    - meter を使った流量制限機能（BMv2 の meter 実装の都合上，動作確認はパケットサイズの制限を使って確認）
  - meter の原理
    - commited rate/busrt + peak rate/burst の考え方
  - direct_counter / direct_meter の紹介
    - テーブルエントリに直接紐つく counter / meter
    - PSA でどのように定義されているか（どのような method = 使い方か） 
    - 利用例をいくつか紹介

- 解説記事２：実装編（〜12末）
  - DP 実装
    - 流量制御用のテーブルを用意し，流量制御の action(traffic_limit) と NoAction を登録．
      - トラヒック制限を行わない場合（デフォルト）は action -> NoAction として登録し，流量制限を行う時のみ action -> traffic_limit に変更
  - CP 実装
    - DB 管理を行う goroutine と各 MAC アドレス毎にトラヒック量の監視を行う goroutine を使用
      - DB 操作部分のソースコード紹介（DB/DP にそれぞれ登録 or からそれぞれ削除）
        - direct_meter の登録部分を特に紹介（今回特有の部分のため）
      - MAC アドレスの登録毎に DB/DP 登録を行ってトラヒック監視用の goroutine を起動
        - カウンタ値を取得する部分のソースコード紹介
        - 容量制限オーバー時に action 変更を行う（テーブルエントリの "MODIFY" を行う）部分のソースコード紹介
          - ソースコードを直接，というより v1.Update のデータ構造を見せて type を modify にする，みたいな見せ方
          - テーブルエントリ登録の部分（vlan-counter の記事）と重複するため簡単に紹介するのみ
        - カウンタを初期化する部分のソースコード紹介
          - DirectCounter の modify 
      - 補足：MAC アドレスを削除した場合は DB/DP から当該エントリを削除するのみ．
        - トラヒック監視用の goroutine は DB からエントリが取得出来なくなる（エントリが削除される）と処理を終了（return）する仕様
          - 上記をソースコードで軽く紹介

traffic-limitter 実装編の肝は下記？
- mongoDB 操作
- direct_counter / direct_meter のP4Runtime からの操作
- action の modify
 


meter を用いてトラヒック速度を制限し，かつ速度制限時にドロップしたトラヒック量をコントロールプレーンに通知する．
ToR スイッチを想定し，送信元 MAC アドレス毎に流量制限をかける（配下のサーバに流量制限をかけるイメージ）
制御対象外の MAC アドレスを C/P から登録できる．

やるべきこと
- meter を使ってトラヒック量制限
  - 送信元 MAC 毎にトラヒックカウント
  - トラヒック量監視@C/P を行い，閾値を超えたら流量制御用のテーブルにエントリ登録

実装改良箇所
- DP プログラム（宛先 MAC を見て L2 転送しつつ，送信元 MAC を見てトラヒックカウント） ★ 済
  - switching 用のテーブルに加えて，流量制御のテーブルを用意
    - 制限容量を超えたら meterconfig を登録し action を limit_traffic に modify（一定時間経過後に action を空にして MODIFY） 
- CP プログラム
  - 監視対象の MAC アドレスを登録する goroutine（DB management) ★ 済
    - 監視対象の MAC アドレスを登録 / 削除する CLI
    - TableEntryHelper 構造体の形式で mongoDB に登録 / から削除
    - 各 MAC 監視用の goroutine を起動
  - 流量監視用 の goroutine
    - mongoDB に登録した ID とタイマーを保持．タイマー経過後，ID で mongoDB からエントリ取得 / カウンタ値取得，を繰り返す． ★済
      -  mongoDB から取得し Helper 構造体変数に落とし込む．
      -  mongoDB から取得に失敗したら，その旨を errCh に通知して goroutine　を落とす
      -  Helpter 構造体変数から TableEntry を build して DirectCounterEntry を作成し Read RCP で取得．
    - 制限容量の超過の確認，登録 Action の変更．
      - 上記で取得した DirectCounter 値を Limit（制限容量）と比較して超過検知
      - 超過していたら上記で生成した TableEntry の Action を NoAction -> limit_traffic に変更し Write   /* TODO */
      - 一定期間速度制限をかけて，その後 Action を limit_traffic -> NoAction に戻す                     /* TODO */